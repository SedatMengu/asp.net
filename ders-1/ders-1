# asp.net mvc ile e ticaret sitesi geliştireceğiz.

# 1.adım : terminal ekranına "dotnet new mvc" yazıyoruz ve projemizin taslak dosyalarını oluşturuyoruz.
# bu adımdan sonra oluşan klasörler şu şekildedir.
# 1- Controllers
# 2- Models
# 3- obj
# 4- Properties
# 5- Views
# 6- wwwroot
# 7- appsettings.Development.json
# 8- appsettings.json
# 9- E-Ticaret.csproj
# 10-Program.cs

# 2.adım : taslak dosyaları bi çalıştırıp inceliyoruz. "dotnet run" komutu ile 
# bu adımdan sonra bin dosyası ekleniyor.

# tarayıcıda projemizi çalıştırdığımızda home ve privacy adında 2 view karşımıza çıkıyor.
# sistem açılır açılmaz "HomeController.cs" adını taşıyan klasör çalışıyor.

# app.MapControllerRoute(
#     name: "default",
#     pattern: "{controller=Home}/{action=Index}/{id?}");

# app.Run();

# bu yapıya sayesinde sayfamız ilk çalıştığında localhost/Home/index sayfası bizi karşılar.

# HomeController da oluşturulan IActionResult lar sayesinde kaç tane sayfamız varsa o kadar IActionResult oluşturulur.

# örnek bir IActionResult yapısı şu şekildedir.

# public IActionResult Index()
#     {
#         return View();
#     }

# Index adında bir tane cshtml dosyası var , ona git ve çalıştır diyor.

# soru - 1 : html ile cshtml arasındaki fark nedir?

# cevap-1 :  - html statik sayfalar oluşturmaya yarayan bir yapıdır , cshtml ise dinmik sayfalar oluşturmaya yarar.
#            - cshtml sayfaları C# ve VisualBasic tarafından desteklenir. 

# chatgpt yorumu :


# HTML (Hypertext Markup Language), web sayfalarının yapısını tanımlayan standart bir işaretleme dilidir. 
# HTML, web tarayıcıları tarafından yorumlanarak kullanıcıya görsel olarak sunulur. 
# HTML dosyaları genellikle .html veya .htm uzantılı olarak kaydedilir.

# CSHTML (Razor Pages), ASP.NET MVC ve ASP.NET Core MVC gibi web uygulama geliştirme framework'leri tarafından kullanılan bir görünüm motorudur. 
# CSHTML dosyaları, HTML ile birlikte C# veya Visual Basic.NET kodunu içerebilir ve dinamik içerik oluşturmak için kullanılabilir. 
# CSHTML dosyaları genellikle .cshtml uzantılı olarak kaydedilir.

# Temel olarak, HTML ve CSHTML, web sayfalarının içeriğini ve yapısını oluşturmak için kullanılan iki farklı dosya türüdür.
# HTML dosyaları, statik içerik oluşturmak için kullanılırken, CSHTML dosyaları, dinamik içerik oluşturmak ve sunmak için kullanılır.
# CSHTML dosyalarında C# veya Visual Basic.NET kodunu kullanabilirsiniz, bu sayede veritabanından veri çekebilir, iş mantığını uygulayabilir ve dinamik olarak içerik oluşturabilirsiniz.
# Ayrıca, CSHTML dosyaları, HTML etiketlerini kullanırken Razor sözdizimini de kullanabilir. 
# Razor sözdizimi, C# veya VB.NET kodunu HTML içinde yerleştirmenizi ve dinamik içerik oluşturmanızı kolaylaştırır. 
# Örneğin, bir döngü veya koşullu ifadeler kullanarak HTML içeriğini dinamik olarak oluşturabilirsiniz.


# Sonuç olarak, HTML dosyaları statik içerik oluşturmak için kullanılırken, 
# CSHTML dosyaları ASP.NET MVC veya ASP.NET Core MVC gibi framework'lerle birlikte kullanılarak 
# dinamik içerik oluşturmak için kullanılır.


# soru-2 : razor söz dizimi nedir ? 

# cevap-1 : asp.net mvc için geliştirilen bir söz dizimidir. 
#           web sayfalarını dinamik olarak oluşturmaya yarayan biz söz dizim mantığıdır.

# chatgpt yorumu :

# Razor, ASP.NET MVC ve ASP.NET Core MVC gibi web uygulama geliştirme framework'leri tarafından kullanılan bir görünüm motoru ve sözdizimidir.
# Razor, web sayfalarında dinamik içerik oluşturmak için kullanılan bir dizi özel işaret ve sözdizimi kurallarını ifade eder.
# Razor sözdizimi, HTML belgeleri içinde C# veya VB.NET kodunu yerleştirmeyi kolaylaştırır ve dinamik içerik oluşturmayı sağlar.
# Bu, web sayfalarını daha etkileşimli ve dinamik hale getirir.

# Razor sözdizimi, özel bir işaretleme kullanır:
# @. Bu işaret, C# veya VB.NET kodunu belirteç olarak işaretler.
# Razor sözdizimi kullanırken, HTML içerisinde C# veya VB.NET kodunu yerleştirmek için @ işaretini kullanabilirsiniz.

# Örneğin, aşağıdaki Razor sözdizimi örneğinde bir döngü kullanılır:

# <ul>
#     @foreach (var item in Model.Items)
#     {
#         <li>@item</li>
#     }
# </ul>


# Bu örnekte, @foreach ifadesi bir C# döngüsünü başlatır ve Model.Items koleksiyonundaki her öğe için bir liste elemanı oluşturur.
# @item ifadesi, döngü içindeki her öğeyi temsil eder.

# Razor sözdizimi, aynı zamanda if koşulları, değişken tanımlama, metot çağrıları gibi C# veya VB.NET'nin diğer dil özelliklerini de destekler.

# Razor sözdizimi, web sayfalarını daha okunabilir ve bakımı daha kolay hale getirmek için HTML etiketleriyle birlikte entegre çalışır.
# Bu, HTML içeriğini bozmaksızın C# veya VB.NET kodu eklemenizi sağlar.

# Sonuç olarak, Razor sözdizimi, ASP.NET MVC ve ASP.NET Core MVC framework'lerinde kullanılan bir görünüm motoru ve sözdizimidir.
# Web sayfalarında dinamik içerik oluşturmak ve C# veya VB.NET kodunu HTML içinde yerleştirmek için kullanılır.


# hangi isimde bi Controller oluşturur isek o isimde bir klasör Views klasörü altında otomatik oluşturulur.

#bir web sitesi sayfası 2 parçadan oluşur. static ve dinamik alanlar. 

# static alanlar : "_layout.cshtml" sayfası içerisinde barındırılır. header , footer , head gibi her sayfada sabit görünmesi gereken alanlar burada tutulur.

# dinamik alanlar : sayfalara göre değişen yerleri bu alan içerisinde tutarız. tutma şeklimizde şu şekildedir.

# <div class="container">
#     <main role="main" class="pb-3">
#         @RenderBody()
#     </main>
# </div>


# @RenderBody() anahar kelimesi bu alanın dinamik olarak başka alanlardan alındığını gösterir.

# önemli : layout alanı içeriside de dinamik alanlar olabilir , title gibi . <title>@ViewData["Title"] - E_Ticaret</title>

# önemli not: Controller de bir değişiklik yaptığımızda programı kapatıp tekrar açmamız gerekir.
#             views alanında bir değişiklik yaptığımızda programı tekrar çalıştırmadan bu değişikliği tarayıcıda görebilmem gerekir.
#             bunun için nuget.org adresine gidiyoruz ve runtime compilation eklentisini kurmamız gerekiyor.
#             dotnet add package Microsoft.AspNetCore.Mvc.Razor.RuntimeCompilation --version 3.0.0 paketini ekliyoruz.
#             kurulu olduğunu E-Ticaret.csproj sayfasındaki şu alanda görebiliriz.
# <ItemGroup>
#     <PackageReference Include="Microsoft.AspNetCore.Mvc.Razor.RuntimeCompilation" Version="3.0.0" />
# </ItemGroup>

# çalışan uygulamayı durdurmak için ctrl+c yapmak gerekir.

# normalde tam bu alanda startup.cs dosyası içeriside bir işlem yapıyorduk ancak yeni versiyonlarında bu kaldırıldığı için buradan yapamıyoruz. burayı Program.cs içerisine ekleyeceğiz.